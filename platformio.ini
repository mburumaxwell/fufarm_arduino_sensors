; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[common]
lib_deps = 
	beegee-tokyo/DHT sensor library for ESPx@1.18
	https://github.com/PaulStoffregen/OneWire.git@2.3.8
	https://github.com/DFRobot/DFRobot_AHT20.git
	https://github.com/DFRobot/DFRobot_EC.git
	https://github.com/DFRobot/DFRobot_ENS160.git
	https://github.com/DFRobot/DFRobot_PH.git
	knolleary/PubSubClient@2.8
	bblanchon/ArduinoJson@6.21.3
	dawidchyrzynski/home-assistant-integration@2.1.0
build_flags = 
	; sample time in milliseconds (60k = 60seconds or 1 minute)
	-DSAMPLE_WINDOW_MILLIS=60000
build_flags_sensors = 
	-DSENSORS_LIGHT_PIN=A0
	-DSENSORS_CO2_PIN=A1
	-DSENSORS_EC_PIN=A2
	-DSENSORS_PH_PIN=A3
	-DSENSORS_MOISTURE_PIN=A4
	; -DSENSORS_DHT22_PIN=2
	-DSENSORS_SEN0217_PIN=3
	-DSENSORS_DS18S20_PIN=4
	-DSENSORS_SEN0204_PIN=5
	-DHAVE_AHT20=1
	-DHAVE_ENS160=1
	-DCALIBRATION_TOGGLE_PIN=12
build_flags_ha = 
	; Debugging for HA is enabled for easier visibility into what is happening in the library
	-DARDUINOHA_DEBUG
	-DHOME_ASSISTANT_MQTT_HOST=\"192.168.8.100\"
	-DHOME_ASSISTANT_MQTT_PORT=1883
	; -DHOME_ASSISTANT_MQTT_USERNAME=\"ard1\"
	; -DHOME_ASSISTANT_MQTT_PASSWORD=\"0\"
	-DHOME_ASSISTANT_DEVICE_NAME=\"ard1\"
build_flags_wifi = 
	-DWIFI_SSID=\"fumanc\"
	; -DWIFI_SSID=\"ASK4\ Wireless\"
	; -DWIFI_PASSPHRASE=\"<your-value>\"
	; in most cases you do not need enterprise wifi but if you do, maybe just the username and password
	; -DWIFI_ENTERPRISE_USERNAME=\"johnson@gov.uk\"
	; -DWIFI_ENTERPRISE_PASSWORD=\"<your-value>\"
	; -DWIFI_ENTERPRISE_IDENTITY=\"<your-value>\"
	; -DWIFI_ENTERPRISE_CA=\"<your-value>\"

; The environments specified in default_envs are used when the current command does not have
; a command override using --environment/-e options
; Comment/uncomment, one of the lines to target just one which is easier/faster for local use.
[platformio]
; default_envs = esp32-s3-devkitc-1-n16r8v
; default_envs = leonardo
; default_envs = uno_r4_wifi
; default_envs = uno_wifi_rev2
default_envs = esp32-s3-devkitc-1-n16r8v, leonardo, uno_r4_wifi, uno_wifi_rev2, ci_validation_1, ci_validation_2

; Similar to the Arduino Nano ESP32 (https://store.arduino.cc/products/nano-esp32) but cheaper and with more memory
[env:esp32-s3-devkitc-1-n16r8v]
platform = https://github.com/pioarduino/platform-espressif32/releases/download/stable/platform-espressif32.zip
framework = arduino
board = esp32-s3-devkitc-1-n16r8v
lib_deps = ${common.lib_deps}
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}
	${common.build_flags_wifi}
	${common.build_flags_ha}

[env:leonardo]
platform = atmelavr
framework = arduino
board = leonardo
lib_deps = ${common.lib_deps}
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}

[env:uno_r4_wifi]
platform = renesas-ra
framework = arduino
board = uno_r4_wifi
lib_deps = ${common.lib_deps}
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}
	${common.build_flags_wifi}
	${common.build_flags_ha}
; needed for WiFi sublibraries to be found correctly
lib_ldf_mode = deep+

[env:uno_wifi_rev2]
platform = atmelmegaavr
framework = arduino
board = uno_wifi_rev2
lib_deps = 
	${common.lib_deps}
	arduino-libraries/WiFiNINA@1.9.1
build_flags = 
	${common.build_flags}
	${common.build_flags_sensors}
	${common.build_flags_wifi}
	${common.build_flags_ha}

; The ci_validation_x configs exist to test that code works with only one sensor.
; Two environments to test that one works without the other.
[env:ci_validation_1]
extends = env:leonardo
build_flags = ${common.build_flags} -DSENSORS_LIGHT_PIN=A0

[env:ci_validation_2]
extends = env:leonardo
build_flags = ${common.build_flags} -DHAVE_AHT20=1

; To be restored once we actually create tests
; [env:native]
; platform = native
; test_framework = unity
